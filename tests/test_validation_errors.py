import json
import os

import pytest
from libcoveocds import SchemaOCDS, run_checks

from cove_ocds import util


@pytest.mark.parametrize(
    ("filename", "schema_subdir", "validation_error_jsons_expected"),
    [
        ("releases_no_validation_errors.json", "", []),
        ("records_no_validation_errors.json", "", []),
        (
            "records_invalid_releases.json",
            "",
            [
                {
                    "message": "'date' is missing but required within 'releases'",
                    "message_safe": "&#x27;date&#x27; is missing but required within &#x27;releases&#x27;",
                    "validator": "required",
                    "assumption": "embedded_releases",
                    "message_type": "required",
                    "path_no_number": "records/releases",
                    "header": "date",
                    "header_extra": "releases/[number]",
                    "null_clause": "",
                    "error_id": None,
                    "values": [{"path": "records/2/releases/0"}],
                },
                {
                    "message": "'date' is missing but required within 'releases'",
                    "message_safe": "&#x27;date&#x27; is missing but required within &#x27;releases&#x27;",
                    "validator": "required",
                    "assumption": "linked_releases",
                    "message_type": "required",
                    "path_no_number": "records/releases",
                    "header": "date",
                    "header_extra": "releases/[number]",
                    "null_clause": "",
                    "error_id": None,
                    "values": [
                        {"path": "records/1/releases/0"},
                        {"path": "records/3/releases/0"},
                    ],
                },
                {
                    "message": "'initiationType' is missing but required within 'releases'",
                    "message_safe": "&#x27;initiationType&#x27; is missing but required within &#x27;releases&#x27;",
                    "validator": "required",
                    "assumption": "embedded_releases",
                    "message_type": "required",
                    "path_no_number": "records/releases",
                    "header": "initiationType",
                    "header_extra": "releases/[number]",
                    "null_clause": "",
                    "error_id": None,
                    "values": [{"path": "records/2/releases/0"}],
                },
                {
                    "message": "'ocid' is missing but required within 'releases'",
                    "message_safe": "&#x27;ocid&#x27; is missing but required within &#x27;releases&#x27;",
                    "validator": "required",
                    "assumption": "embedded_releases",
                    "message_type": "required",
                    "path_no_number": "records/releases",
                    "header": "ocid",
                    "header_extra": "releases/[number]",
                    "null_clause": "",
                    "error_id": None,
                    "values": [{"path": "records/2/releases/0"}],
                },
                {
                    "message": "'releases' is not a JSON array",
                    "message_safe": "&#x27;releases&#x27; is not a JSON array",
                    "validator": "type",
                    "assumption": "linked_releases",
                    "message_type": "array",
                    "path_no_number": "records/releases",
                    "header": "releases",
                    "header_extra": "releases",
                    "null_clause": "is not null, and",
                    "error_id": None,
                    "values": [
                        {"path": "records/6/releases", "value": "a string"},
                        {"path": "records/7/releases", "value": None},
                        {"path": "records/8/releases"},
                    ],
                    "docs_ref": "record-package-schema.json,/definitions/record,releases",
                    "schema_title": "Releases",
                    "schema_description_safe": "<p>An array of linking identifiers or releases</p>\n",
                },
                {
                    "message": "'tag' is missing but required within 'releases'",
                    "message_safe": "&#x27;tag&#x27; is missing but required within &#x27;releases&#x27;",
                    "validator": "required",
                    "assumption": "embedded_releases",
                    "message_type": "required",
                    "path_no_number": "records/releases",
                    "header": "tag",
                    "header_extra": "releases/[number]",
                    "null_clause": "",
                    "error_id": None,
                    "values": [{"path": "records/2/releases/0"}],
                },
                {
                    "message": "'url' is missing but required within 'releases'",
                    "message_safe": "&#x27;url&#x27; is missing but required within &#x27;releases&#x27;",
                    "validator": "required",
                    "assumption": "linked_releases",
                    "message_type": "required",
                    "path_no_number": "records/releases",
                    "header": "url",
                    "header_extra": "releases/[number]",
                    "null_clause": "",
                    "error_id": None,
                    "values": [{"path": "records/1/releases/0"}],
                },
                {
                    "message": "This array should contain either entirely embedded releases or linked releases. Embedded releases contain an 'id' whereas linked releases do not. Your releases contain a mixture.",  # noqa: E501
                    "message_safe": "This array should contain either entirely embedded releases or linked releases. Embedded releases contain an &#x27;id&#x27; whereas linked releases do not. Your releases contain a mixture.",  # noqa: E501
                    "validator": "oneOf",
                    "assumption": None,
                    "message_type": "oneOf",
                    "path_no_number": "records/releases",
                    "header": "releases",
                    "header_extra": "releases",
                    "null_clause": "",
                    "error_id": "releases_both_embedded_and_linked",
                    "values": [
                        {"path": "records/4/releases"},
                        {"path": "records/5/releases"},
                    ],
                    "docs_ref": "record-package-schema.json,/definitions/record,releases",
                    "schema_title": "Releases",
                    "schema_description_safe": "<p>An array of linking identifiers or releases</p>\n",
                },
                {
                    "message": "[] should be non-empty",
                    "message_safe": "[] should be non-empty",
                    "validator": "minItems",
                    "assumption": "linked_releases",
                    "message_type": "minItems",
                    "path_no_number": "records/releases",
                    "header": "releases",
                    "header_extra": "releases",
                    "null_clause": "",
                    "error_id": None,
                    "values": [{"path": "records/0/releases"}],
                    "instance": [],
                    "docs_ref": "record-package-schema.json,/definitions/record,releases",
                    "schema_title": "Releases",
                    "schema_description_safe": "<p>An array of linking identifiers or releases</p>\n",
                },
            ],
        ),
        (
            "records_invalid_releases.json",
            "1-0",
            [
                {
                    "message": "'date' is missing but required within 'releases'",
                    "message_safe": "&#x27;date&#x27; is missing but required within &#x27;releases&#x27;",
                    "validator": "required",
                    "assumption": "embedded_releases",
                    "message_type": "required",
                    "path_no_number": "records/releases",
                    "header": "date",
                    "header_extra": "releases/[number]",
                    "null_clause": "",
                    "error_id": None,
                    "values": [{"path": "records/2/releases/0"}],
                },
                {
                    "message": "'date' is missing but required within 'releases'",
                    "message_safe": "&#x27;date&#x27; is missing but required within &#x27;releases&#x27;",
                    "validator": "required",
                    "assumption": "linked_releases",
                    "message_type": "required",
                    "path_no_number": "records/releases",
                    "header": "date",
                    "header_extra": "releases/[number]",
                    "null_clause": "",
                    "error_id": None,
                    "values": [
                        {"path": "records/1/releases/0"},
                        {"path": "records/3/releases/0"},
                    ],
                },
                {
                    "message": "'initiationType' is missing but required within 'releases'",
                    "message_safe": "&#x27;initiationType&#x27; is missing but required within &#x27;releases&#x27;",
                    "validator": "required",
                    "assumption": "embedded_releases",
                    "message_type": "required",
                    "path_no_number": "records/releases",
                    "header": "initiationType",
                    "header_extra": "releases/[number]",
                    "null_clause": "",
                    "error_id": None,
                    "values": [{"path": "records/2/releases/0"}],
                },
                {
                    "message": "'ocid' is missing but required within 'releases'",
                    "message_safe": "&#x27;ocid&#x27; is missing but required within &#x27;releases&#x27;",
                    "validator": "required",
                    "assumption": "embedded_releases",
                    "message_type": "required",
                    "path_no_number": "records/releases",
                    "header": "ocid",
                    "header_extra": "releases/[number]",
                    "null_clause": "",
                    "error_id": None,
                    "values": [{"path": "records/2/releases/0"}],
                },
                {
                    "message": "'releases' is not a JSON array",
                    "message_safe": "&#x27;releases&#x27; is not a JSON array",
                    "validator": "type",
                    "assumption": "linked_releases",
                    "message_type": "array",
                    "path_no_number": "records/releases",
                    "header": "releases",
                    "header_extra": "releases",
                    "null_clause": "is not null, and",
                    "error_id": None,
                    "values": [
                        {"path": "records/6/releases", "value": "a string"},
                        {"path": "records/7/releases", "value": None},
                        {"path": "records/8/releases"},
                    ],
                    "docs_ref": "record-package-schema.json,/definitions/record,releases",
                    "schema_title": "",
                    "schema_description_safe": "<p>An array of linking identifiers or releases</p>\n",
                },
                {
                    "message": "'tag' is missing but required within 'releases'",
                    "message_safe": "&#x27;tag&#x27; is missing but required within &#x27;releases&#x27;",
                    "validator": "required",
                    "assumption": "embedded_releases",
                    "message_type": "required",
                    "path_no_number": "records/releases",
                    "header": "tag",
                    "header_extra": "releases/[number]",
                    "null_clause": "",
                    "error_id": None,
                    "values": [{"path": "records/2/releases/0"}],
                },
                {
                    "message": "'url' is missing but required within 'releases'",
                    "message_safe": "&#x27;url&#x27; is missing but required within &#x27;releases&#x27;",
                    "validator": "required",
                    "assumption": "linked_releases",
                    "message_type": "required",
                    "path_no_number": "records/releases",
                    "header": "url",
                    "header_extra": "releases/[number]",
                    "null_clause": "",
                    "error_id": None,
                    "values": [{"path": "records/1/releases/0"}],
                },
                {
                    "message": "This array should contain either entirely embedded releases or linked releases. Embedded releases contain an 'id' whereas linked releases do not. Your releases contain a mixture.",  # noqa: E501
                    "message_safe": "This array should contain either entirely embedded releases or linked releases. Embedded releases contain an &#x27;id&#x27; whereas linked releases do not. Your releases contain a mixture.",  # noqa: E501
                    "validator": "oneOf",
                    "assumption": None,
                    "message_type": "oneOf",
                    "path_no_number": "records/releases",
                    "header": "releases",
                    "header_extra": "releases",
                    "null_clause": "",
                    "error_id": "releases_both_embedded_and_linked",
                    "values": [
                        {"path": "records/4/releases"},
                        {"path": "records/5/releases"},
                    ],
                    "docs_ref": "record-package-schema.json,/definitions/record,releases",
                    "schema_title": "",
                    "schema_description_safe": "<p>An array of linking identifiers or releases</p>\n",
                },
                {
                    "message": "[] should be non-empty",
                    "message_safe": "[] should be non-empty",
                    "validator": "minItems",
                    "assumption": "linked_releases",
                    "message_type": "minItems",
                    "path_no_number": "records/releases",
                    "header": "releases",
                    "header_extra": "releases",
                    "null_clause": "",
                    "error_id": None,
                    "values": [{"path": "records/0/releases"}],
                    "instance": [],
                    "docs_ref": "record-package-schema.json,/definitions/record,releases",
                    "schema_title": "",
                    "schema_description_safe": "<p>An array of linking identifiers or releases</p>\n",
                },
            ],
        ),
        (
            "releases_non_unique.json",
            "",
            [
                {
                    "message": "Non-unique combination of ocid, id values",
                    "message_safe": "Non-unique combination of ocid, id values",
                    "validator": "uniqueItems",
                    "assumption": None,
                    "message_type": "uniqueItems",
                    "path_no_number": "releases",
                    "header": "releases",
                    "header_extra": "releases",
                    "null_clause": "",
                    "error_id": "uniqueItems_with_ocid__id",
                    "values": [
                        {"path": "releases", "value": "EXAMPLE-1, EXAMPLE-1-1"},
                        {"path": "releases", "value": "EXAMPLE-1, EXAMPLE-1-2"},
                    ],
                    "docs_ref": "release-package-schema.json,,releases",
                    "schema_title": "Releases",
                    "schema_description_safe": "<p>An array of one or more OCDS releases.</p>\n",
                }
            ],
        ),
        ("releases_unique_ocids_but_not_ids.json", "", []),
        (
            "records_non_unique.json",
            "",
            [
                {
                    "message": "Non-unique ocid values",
                    "message_safe": "Non-unique ocid values",
                    "validator": "uniqueItems",
                    "assumption": None,
                    "message_type": "uniqueItems",
                    "path_no_number": "records",
                    "header": "records",
                    "header_extra": "records",
                    "null_clause": "",
                    "error_id": "uniqueItems_with_ocid",
                    "values": [
                        {"path": "records", "value": "EXAMPLE-1"},
                        {"path": "records", "value": "EXAMPLE-2"},
                    ],
                    "docs_ref": "record-package-schema.json,,records",
                    "schema_title": "Records",
                    "schema_description_safe": "<p>The records for this data package.</p>\n",
                }
            ],
        ),
        (
            "releases_non_unique_no_id.json",
            "",
            [
                {
                    "message": "'id' is missing but required",
                    "message_safe": "&#x27;id&#x27; is missing but required",
                    "validator": "required",
                    "assumption": None,
                    "message_type": "required",
                    "path_no_number": "releases",
                    "header": "id",
                    "header_extra": "releases/[number]",
                    "null_clause": "",
                    "error_id": None,
                    "values": [{"path": "releases/0"}, {"path": "releases/1"}],
                },
                {
                    "message": "Array has non-unique elements",
                    "message_safe": "Array has non-unique elements",
                    "validator": "uniqueItems",
                    "assumption": None,
                    "message_type": "uniqueItems",
                    "path_no_number": "releases",
                    "header": "releases",
                    "header_extra": "releases",
                    "null_clause": "",
                    "error_id": "uniqueItems_no_ids",
                    "values": [{"path": "releases"}],
                    "docs_ref": "release-package-schema.json,,releases",
                    "schema_title": "Releases",
                    "schema_description_safe": "<p>An array of one or more OCDS releases.</p>\n",
                },
            ],
        ),
        (
            "records_non_unique_no_ocid.json",
            "",
            [
                {
                    "message": "'ocid' is missing but required",
                    "message_safe": "&#x27;ocid&#x27; is missing but required",
                    "validator": "required",
                    "assumption": None,
                    "message_type": "required",
                    "path_no_number": "records",
                    "header": "ocid",
                    "header_extra": "records/[number]",
                    "null_clause": "",
                    "error_id": None,
                    "values": [{"path": "records/0"}, {"path": "records/1"}],
                },
                {
                    "message": "Array has non-unique elements",
                    "message_safe": "Array has non-unique elements",
                    "validator": "uniqueItems",
                    "assumption": None,
                    "message_type": "uniqueItems",
                    "path_no_number": "records",
                    "header": "records",
                    "header_extra": "records",
                    "null_clause": "",
                    "error_id": "uniqueItems_no_ids",
                    "values": [{"path": "records"}],
                    "docs_ref": "record-package-schema.json,,records",
                    "schema_title": "Records",
                    "schema_description_safe": "<p>The records for this data package.</p>\n",
                },
            ],
        ),
        # Check that we handle unique arrays correctly also
        # (e.g. that we don't incorrectly claim they are not unique)
        (
            "releases_unique.json",
            "",
            [
                {
                    "message": "'id' is missing but required",
                    "message_safe": "&#x27;id&#x27; is missing but required",
                    "validator": "required",
                    "assumption": None,
                    "message_type": "required",
                    "path_no_number": "releases",
                    "header": "id",
                    "header_extra": "releases/[number]",
                    "null_clause": "",
                    "error_id": None,
                    "values": [{"path": "releases/0"}, {"path": "releases/1"}],
                }
            ],
        ),
        (
            "records_unique.json",
            "",
            [
                {
                    "message": "'ocid' is missing but required",
                    "message_safe": "&#x27;ocid&#x27; is missing but required",
                    "validator": "required",
                    "assumption": None,
                    "message_type": "required",
                    "path_no_number": "records",
                    "header": "ocid",
                    "header_extra": "records/[number]",
                    "null_clause": "",
                    "error_id": None,
                    "values": [{"path": "records/0"}, {"path": "records/1"}],
                }
            ],
        ),
    ],
)
def test_validation_release_or_record_package(filename, validation_error_jsons_expected, schema_subdir):
    with open(os.path.join("tests", "fixtures", schema_subdir, filename)) as fp:
        json_data = json.load(fp)

    schema_obj = SchemaOCDS(json_data)
    context = run_checks(json_data, schema_obj)
    util.annotate_errors(context, schema_obj)

    validation_error_jsons = context["validation_errors"]

    validation_errors = []
    for validation_error_json, values in validation_error_jsons:
        validation_error = json.loads(validation_error_json)
        validation_error["values"] = values
        # Remove this as it can be a rather large schema object
        del validation_error["validator_value"]
        validation_errors.append(validation_error)

    def strip_nones(list_of_dicts):
        return [{key: value for key, value in a_dict.items() if value is not None} for a_dict in list_of_dicts]

    assert strip_nones(validation_errors) == strip_nones(validation_error_jsons_expected)
